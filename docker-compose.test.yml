# Generated by Copilot (GPT-4o), 2025-08-30
# Description: Docker Compose configuration for testing the VS Code container build
# Provides isolated testing environment with volume mounts and networking

version: '3.8'

services:
  # Main VS Code container test
  vscode-test:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: vscode-debian-slim:test
    container_name: vscode-test-container
    environment:
      - TUNNEL_NAME=test_tunnel_ci
      - FORCE_ANALYSIS=false
      - LOGGING=true
      - COPILOT_IS_AUTONOMOUS=false
      - AUTO_UPDATE_ON_START=false
    volumes:
      - ./tests/configs:/home/devuser/test-configs:ro
      - test-logs:/home/devuser/LOGS
      - test-workspace:/home/devuser/workspace
    ports:
      - "8080:8080"
    networks:
      - vscode-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: "no"
    
  # Test database for extension testing (optional)
  test-db:
    image: postgres:15-alpine
    container_name: vscode-test-db
    environment:
      - POSTGRES_DB=vscode_test
      - POSTGRES_USER=testuser
      - POSTGRES_PASSWORD=testpass
    volumes:
      - test-db-data:/var/lib/postgresql/data
    networks:
      - vscode-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d vscode_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Security scanner container
  security-scanner:
    image: aquasec/trivy:latest
    container_name: vscode-security-scanner
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/tmp/scan-results
    command: >
      sh -c "
        echo 'Running security scan on vscode-test container...' &&
        trivy image --format json --output /tmp/scan-results/trivy-scan-results.json vscode-debian-slim:test ||
        echo 'Security scan completed with warnings'
      "
    depends_on:
      vscode-test:
        condition: service_healthy
    networks:
      - vscode-test-network

  # Integration test runner
  test-runner:
    build:
      context: ./tests
      dockerfile_inline: |
        FROM ubuntu:22.04
        RUN apt-get update && apt-get install -y \
            curl \
            jq \
            docker.io \
            shellcheck \
            && rm -rf /var/lib/apt/lists/*
        WORKDIR /tests
        COPY . .
        CMD ["./integration/test_build_script.sh"]
    container_name: vscode-test-runner
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./tests:/tests
      - ./logs:/tests/logs
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - TEST_CONTAINER_NAME=vscode-test-container
    depends_on:
      vscode-test:
        condition: service_healthy
    networks:
      - vscode-test-network

volumes:
  test-logs:
    driver: local
  test-workspace:
    driver: local
  test-db-data:
    driver: local

networks:
  vscode-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
