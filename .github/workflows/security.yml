---
# Generated by Copilot (GPT-4o), 2025-08-30
# Description: Security-focused workflow for vulnerability scanning and
# compliance. Runs comprehensive security checks including SAST, dependency
# scanning, and container analysis
name: Security Scanning
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run every day at 6 AM UTC for daily security monitoring
    - cron: "0 6 * * *"
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript
          queries: security-extended,security-and-quality
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "vscode-container-updater/package-lock.json"
      - name: Install dependencies
        run: |
          cd vscode-container-updater
          npm ci
      - name: Run npm audit
        run: |
          cd vscode-container-updater
          npm audit \
            --audit-level=moderate \
            --json \
            > npm-audit-results.json || true
      - name: Upload npm audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: vscode-container-updater/npm-audit-results.json
          retention-days: 30
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        # Copilot generated: Ensure SNYK_TOKEN is set in repository secrets or
        # remove this line to avoid context errors.
        with:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          args: >-
            --file=vscode-container-updater/package.json
            --severity-threshold=high
            --json-file-output=snyk-results.json
          command: test
      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk-results.sarif
  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run TruffleHog OSS
        id: trufflehog
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
      - name: Scan for hardcoded secrets in shell scripts
        run: |
          echo "Scanning for potential secrets in shell scripts..."
          # Check for common secret patterns
          if grep -r -E "(password|passwd|api_key|secret|token|credential)" \
            --include="*.sh" --include="*.yaml" --include="*.yml" .; then
            echo "Potential secrets found in files above"
            echo "Please review these findings carefully"
          else
            echo "No obvious secrets detected"
          fi
  # Infrastructure as Code security
  iac-scan:
    name: Infrastructure as Code Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Checkov IaC scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,yaml
          output_format: sarif
          output_file_path: checkov-results.sarif
          download_external_modules: true
      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
  # Container security baseline
  container-security:
    name: Container Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build container for security testing
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: security-test:latest
          load: true
      - name: Run Dockle security linter
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            goodwithtech/dockle:latest security-test:latest
      - name: Run container structure test
        run: |
          # Install container-structure-test
          curl -LO \
            https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 \
            /usr/local/bin/container-structure-test
          # Create basic structure test
          cat > container-test.yaml << 'EOF'
          schemaVersion: 2.0.0
          commandTests:
            - name: "code command exists"
              command: "which"
              args: ["code"]
              expectedOutput: ["/usr/local/bin/code"]
          fileExistenceTests:
            - name: "VS Code installed"
              path: "/usr/local/bin/code"
              shouldExist: true
          EOF
          # Run the test
          container-structure-test test --image security-test:latest \
            --config container-test.yaml
  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs:
      [sast-scan, dependency-scan, secret-scan, iac-scan, container-security]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download all security artifacts
        uses: actions/download-artifact@v4
      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date:** $(date -u)" >> security-report.md
          echo "**Repository:** ${{ github.repository }}" >> security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          echo "| Scan Type | Status | Details |" >> security-report.md
          echo "|-----------|--------|---------|" >> security-report.md
          echo "| SAST (CodeQL) | ${{ needs.sast-scan.result }} | Static \
            application security testing |" >> security-report.md
          echo "| Dependencies | ${{ needs.dependency-scan.result }} | npm \
            audit & Snyk scanning |" >> security-report.md
          echo "| Secrets | ${{ needs.secret-scan.result }} | TruffleHog \
            secret detection |" >> security-report.md
          echo "| IaC Security | ${{ needs.iac-scan.result }} | Checkov \
            infrastructure scanning |" >> security-report.md
          echo "| Container Security | ${{ needs.container-security.result }} \
            | Dockle & structure tests |" >> security-report.md
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "- Review any failed scans in the GitHub Security tab" >> \
            security-report.md
          echo "- Update dependencies with known vulnerabilities" >> \
            security-report.md
          echo "- Follow container security best practices" >> \
            security-report.md
          echo "- Regularly update base images and dependencies" >> \
            security-report.md
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 90
      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”’ Security Scan Results\n\n${report}`
            });
