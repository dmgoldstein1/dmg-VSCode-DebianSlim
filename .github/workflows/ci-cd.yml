---
# Generated by Copilot (GPT-4o), 2025-08-30
# Description: Comprehensive CI/CD pipeline for VS Code Debian Slim Docker
# build system. Runs tests, builds containers, performs security analysis,
# and deploys artifacts
name: CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: "18"
jobs:
  # Lint and validate code
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "vscode-container-updater/package-lock.json"
      - name: Install dependencies
        run: |
          cd vscode-container-updater
          npm ci
      - name: Lint TypeScript
        run: |
          cd vscode-container-updater
          npm run lint
      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck
      - name: Lint Shell Scripts
        run: |
          find . -name "*.sh" -type f | xargs shellcheck
      - name: Validate YAML files
        run: |
  find . -type f \
    \( -name "*.yaml" -o -name "*.yml" \) \
    -not -path "*/node_modules/*" \
    | xargs yamllint
  # Run unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "vscode-container-updater/package-lock.json"
      - name: Install dependencies
        run: |
          cd vscode-container-updater
          npm ci
      - name: Run TypeScript compilation test
        run: |
          cd vscode-container-updater
          npm run compile
      - name: Run shell script unit tests
        run: |
          cd tests/unit
          ./unit_tests.sh
      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-logs
          path: logs/unit-test-*.log
          retention-days: 7
  # Run integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      docker:
        image: docker:24-dind
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Make build script executable
        run: chmod +x build.sh
      - name: Run integration tests
        run: |
          cd tests/integration
          ./test_build_script.sh
        timeout-minutes: 30
      - name: Upload integration test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs
          path: logs/test-run-*.log
          retention-days: 7
  # Build and test Docker containers
  docker-build:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: integration-tests
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Test Docker image
        run: |
          # Test that the image runs correctly
          docker run --rm ${{ steps.meta.outputs.tags }} code --version
  # Security scanning
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: docker-build
    if: always()
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image for security scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: security-scan-image:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "security-scan-image:latest"
          format: "sarif"
          output: "trivy-results.sarif"
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
      - name: Run Docker Scout
        if: github.event_name != 'pull_request'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: security-scan-image:latest
          sarif-file: "scout-results.sarif"
          summary: true
      - name: Upload Scout scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "scout-results.sarif"
  # Extension packaging and testing
  extension-tests:
    name: VS Code Extension Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "vscode-container-updater/package-lock.json"
      - name: Install dependencies
        run: |
          cd vscode-container-updater
          npm ci
      - name: Compile TypeScript
        run: |
          cd vscode-container-updater
          npm run compile
      - name: Package extension
        run: |
          cd vscode-container-updater
          npx @vscode/vsce package --out vscode-container-updater-ci.vsix
      - name: Upload extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension
          path: vscode-container-updater/vscode-container-updater-ci.vsix
          retention-days: 30
  # Deployment (runs only on main branch)
  deploy:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan, extension-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    # environment:
    #   production  # Commented out - requires 'production' environment
    #   to be defined in repo settings
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download extension artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode-extension
          path: ./artifacts
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/vscode-container-updater-ci.vsix
          generate_release_notes: true
          draft: false
          prerelease: false
  # Cleanup old artifacts and images
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy]
    permissions:
      packages: write
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        continue-on-error: true
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: container
          min-versions-to-keep: 5
          delete-only-untagged-versions: true
