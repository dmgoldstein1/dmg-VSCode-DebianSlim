#!/bin/bash

# Generated by Copilot (GPT-4), 2025-08-29
# Description: Test script for the VS Code Debian Slim Docker build system.
# This script performs comprehensive testing of the build system components.

set -euo pipefail

# Test configuration
LOGS_DIR="logs"
TEST_LOG="$LOGS_DIR/test-run-$(date +%s).log"
TEST_YAML="validation_test.yaml"
ERRORS_FOUND=0

mkdir -p "$LOGS_DIR"

# Logging functions
log_info() {
    echo "[INFO] $*" | tee -a "$TEST_LOG"
}

log_error() {
    echo "[ERROR] $*" | tee -a "$TEST_LOG"
    ERRORS_FOUND=$((ERRORS_FOUND + 1))
}

log_success() {
    echo "[SUCCESS] $*" | tee -a "$TEST_LOG"
}

run_test() {
    local test_name="$1"
    local test_command="$2"
    
    log_info "Running test: $test_name"
    
    if eval "$test_command" >> "$TEST_LOG" 2>&1; then
        log_success "$test_name passed"
        return 0
    else
        log_error "$test_name failed"
        return 1
    fi
}

# Test 1: Validate shell scripts with shellcheck
test_shellcheck() {
    log_info "Testing shell scripts with shellcheck..."
    
    # Test main build script
    if ! shellcheck build_vscode_docker_debian_slim_secure.sh; then
        log_error "build_vscode_docker_debian_slim_secure.sh failed shellcheck"
        return 1
    fi
    
    # Test entrypoint scripts  
    if ! shellcheck scripts/vscode-tunnel-entrypoint.sh; then
        log_error "vscode-tunnel-entrypoint.sh failed shellcheck"
        return 1
    fi
    
    if ! shellcheck entrypoint-legacy.sh; then
        log_error "entrypoint-legacy.sh failed shellcheck"
        return 1
    fi
    
    log_success "All shell scripts passed shellcheck"
    return 0
}

# Test 2: Validate YAML files
test_yaml_validation() {
    log_info "Testing YAML file validation..."
    
    # Check if build_variables.yaml is valid
    if ! python3 -c "import yaml; yaml.safe_load(open('build_variables.yaml'))" 2>/dev/null; then
        log_error "build_variables.yaml is not valid YAML"
        return 1
    fi
    
    log_success "YAML files are valid"
    return 0
}

# Test 3: Create test YAML config and test argument parsing
test_argument_parsing() {
    log_info "Testing argument parsing with test YAML config..."
    
    # Create test YAML file
    cat > "$TEST_YAML" << 'EOF'
# Test configuration
tunnel_name: test_tunnel_123
force_analysis: true
logging: true
copilot_is_autonomous: false
git_user_name: "Test User"
git_user_email: "test@example.com"
auto_update_on_start: false
update_check_interval_seconds: 1800
approval_file: "/tmp/test_approval"
EOF

    # Test the YAML parsing by running the script with dry-run simulation
    if ! bash -n build_vscode_docker_debian_slim_secure.sh; then
        log_error "Build script has syntax errors"
        rm -f "$TEST_YAML"
        return 1
    fi
    
    rm -f "$TEST_YAML"
    log_success "Argument parsing test passed"
    return 0
}

# Test 4: Validate Docker requirements
test_docker_requirements() {
    log_info "Testing Docker requirements..."
    
    if ! command -v docker >/dev/null 2>&1; then
        log_error "Docker is not installed or not in PATH"
        return 1
    fi
    
    if ! docker info >/dev/null 2>&1; then
        log_error "Docker daemon is not running or not accessible"
        return 1
    fi
    
    log_success "Docker requirements met"
    return 0
}

# Test 5: Validate Dockerfile syntax
test_dockerfile_syntax() {
    log_info "Testing Dockerfile syntax..."
    
    # Check if Dockerfile exists and is readable
    if [ ! -f "Dockerfile" ]; then
        log_error "Dockerfile not found"
        return 1
    fi
    
    # Basic syntax check - ensure FROM instruction exists
    if ! grep -q "^FROM" Dockerfile; then
        log_error "Dockerfile missing FROM instruction"
        return 1
    fi
    
    # Check for basic Dockerfile instructions
    if ! grep -qE "^(RUN|COPY|ADD|WORKDIR|USER)" Dockerfile; then
        log_error "Dockerfile appears to be incomplete"
        return 1
    fi
    
    log_success "Dockerfile syntax appears valid"
    return 0
}

# Test 6: Test VS Code extension structure
test_vscode_extension() {
    log_info "Testing VS Code extension structure..."
    
    if [ ! -f "vscode-container-updater/package.json" ]; then
        log_error "VS Code extension package.json not found"
        return 1
    fi
    
    if ! python3 -c "import json; json.load(open('vscode-container-updater/package.json'))" 2>/dev/null; then
        log_error "VS Code extension package.json is not valid JSON"
        return 1
    fi
    
    if [ ! -f "vscode-container-updater/tsconfig.json" ]; then
        log_error "VS Code extension tsconfig.json not found"
        return 1
    fi
    
    log_success "VS Code extension structure is valid"
    return 0
}

# Test 7: Test log directory creation and permissions
test_log_directory() {
    log_info "Testing log directory functionality..."
    
    # Test log directory creation
    test_logs_dir="test_logs_$$"
    mkdir -p "$test_logs_dir"
    
    if [ ! -d "$test_logs_dir" ]; then
        log_error "Failed to create test log directory"
        return 1
    fi
    
    # Test file creation in logs
    test_file="$test_logs_dir/test.log"
    echo "test" > "$test_file"
    
    if [ ! -f "$test_file" ]; then
        log_error "Failed to create test log file"
        rm -rf "$test_logs_dir"
        return 1
    fi
    
    # Cleanup
    rm -rf "$test_logs_dir"
    log_success "Log directory functionality works"
    return 0
}

# Main test execution
main() {
    log_info "Starting comprehensive test suite..."
    log_info "Test log: $TEST_LOG"
    
    # Run all tests
    run_test "Shell script linting" "test_shellcheck"
    run_test "YAML validation" "test_yaml_validation" 
    run_test "Argument parsing" "test_argument_parsing"
    run_test "Docker requirements" "test_docker_requirements"
    run_test "Dockerfile syntax" "test_dockerfile_syntax"
    run_test "VS Code extension" "test_vscode_extension"
    run_test "Log directory" "test_log_directory"
    
    # Report results
    echo ""
    echo "=========================================="
    echo "Test Summary"
    echo "=========================================="
    if [ $ERRORS_FOUND -eq 0 ]; then
        echo "✓ All tests passed!"
        echo "Full test log: $TEST_LOG"
        exit 0
    else
        echo "✗ $ERRORS_FOUND test(s) failed"
        echo "Check test log for details: $TEST_LOG"
        exit 1
    fi
}

# Run tests if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
