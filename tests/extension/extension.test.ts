/*
 * Generated by Copilot (GPT-4o), 2025-08-30
 * Description: Unit tests for VS Code Container Updater extension
 * Tests core functionality including log parsing, update checking, and approval mechanisms
 */

import * as assert from 'assert';
import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';

// Import extension modules (when available)
// import * as extension from '../../vscode-container-updater/src/extension';

suite('VS Code Container Updater Extension Tests', () => {
    vscode.window.showInformationMessage('Starting extension tests.');

    test('Extension should be present', () => {
        assert.ok(vscode.extensions.getExtension('vscode-container-updater'));
    });

    test('Extension should activate', async () => {
        const ext = vscode.extensions.getExtension('vscode-container-updater');
        if (ext) {
            await ext.activate();
            assert.strictEqual(ext.isActive, true);
        }
    });

    suite('Log Parsing Tests', () => {
        test('Should parse VS Code CLI update logs correctly', () => {
            const sampleLog = `
[INFO] VS Code CLI update available: 1.95.0 -> 1.96.0
[INFO] Download URL: https://github.com/microsoft/vscode/releases/
[INFO] Update size: 245MB
[INFO] Security fixes included
            `.trim();

            // Mock log parsing function
            const parseLogOutput = (log: string) => {
                const versionMatch = log.match(/(\d+\.\d+\.\d+) -> (\d+\.\d+\.\d+)/);
                if (versionMatch) {
                    return {
                        currentVersion: versionMatch[1],
                        newVersion: versionMatch[2],
                        hasUpdate: true
                    };
                }
                return { hasUpdate: false };
            };

            const result = parseLogOutput(sampleLog);
            assert.strictEqual(result.hasUpdate, true);
            assert.strictEqual(result.currentVersion, '1.95.0');
            assert.strictEqual(result.newVersion, '1.96.0');
        });

        test('Should handle logs with no updates', () => {
            const sampleLog = `
[INFO] No VS Code CLI updates available
[INFO] Current version: 1.95.0 is latest
            `.trim();

            const parseLogOutput = (log: string) => {
                const hasUpdate = log.includes('update available') || log.includes('new version');
                return { hasUpdate };
            };

            const result = parseLogOutput(sampleLog);
            assert.strictEqual(result.hasUpdate, false);
        });
    });

    suite('File System Tests', () => {
        test('Should create approval file when requested', async () => {
            const testApprovalPath = path.join(__dirname, 'test_approval_file');
            
            // Mock approval file creation
            const createApprovalFile = async (filePath: string) => {
                try {
                    await fs.promises.writeFile(filePath, `APPROVED_BY_USER\nTIMESTAMP: ${new Date().toISOString()}\n`);
                    return true;
                } catch (error) {
                    return false;
                }
            };

            const success = await createApprovalFile(testApprovalPath);
            assert.strictEqual(success, true);

            // Verify file exists and has correct content
            if (fs.existsSync(testApprovalPath)) {
                const content = await fs.promises.readFile(testApprovalPath, 'utf-8');
                assert.ok(content.includes('APPROVED_BY_USER'));
                
                // Clean up
                await fs.promises.unlink(testApprovalPath);
            }
        });
    });

    suite('Configuration Tests', () => {
        test('Should read configuration values correctly', () => {
            const config = vscode.workspace.getConfiguration('vscode-container-updater');
            
            // Test default values
            const checkInterval = config.get<number>('checkInterval', 300);
            const autoCheck = config.get<boolean>('autoCheck', true);
            
            assert.strictEqual(typeof checkInterval, 'number');
            assert.strictEqual(typeof autoCheck, 'boolean');
            assert.ok(checkInterval >= 60); // Minimum reasonable interval
        });
    });
});
