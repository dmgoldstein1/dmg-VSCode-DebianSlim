#!/usr/bin/env bash

# Generated by Copilot (GPT-4), 2025-08-29
# Description: Entrypoint for the VS Code Server container. If GH_TOKEN or
# GITHUB_TOKEN is provided, it authenticates the GitHub CLI non-interactively
# and sets up git credentials, then launches the VS Code tunnel with the same
# behavior as the previous Dockerfile CMD. Logs are written to ~/LOGS.

set -euo pipefail

VERBOSE="${VERBOSE:-false}"
SKIP_TUNNEL="${SKIP_TUNNEL:-false}"
AUTO_UPDATE_ON_START="${AUTO_UPDATE_ON_START:-true}"
UPDATE_CHECK_INTERVAL_SECONDS="${UPDATE_CHECK_INTERVAL_SECONDS:-3600}"
APPROVAL_FILE="$HOME/APPROVE_CODE_UPDATE"
LOG_DIR="$HOME/LOGS"
mkdir -p "$LOG_DIR"
TS="$(date +%s)"
LOG_FILE="$LOG_DIR/entrypoint-log-$TS.log"

log() {
  echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] $*" | tee -a "$LOG_FILE"
}

vlog() {
  if [[ "$VERBOSE" == "true" ]]; then
    log "[VERBOSE] $*"
  fi
}

# --- VS Code CLI update helpers (apt-based) ---
have_apt() { command -v apt-get >/dev/null 2>&1; }

get_installed_code_version() {
  dpkg-query -W -f='${Version}\n' code 2>/dev/null || true
}

get_candidate_code_version() {
  # apt-cache policy returns Candidate version; handle missing gracefully
  apt-cache policy code 2>/dev/null | awk '/Candidate:/ {print $2}'
}

refresh_apt_indexes() {
  sudo apt-get update 2>&1 | sudo tee -a "$LOG_FILE" >/dev/null || true
}

code_update_available() {
  local installed candidate
  installed="$(get_installed_code_version)" || installed=""
  candidate="$(get_candidate_code_version)" || candidate=""
  if [[ -z "$installed" || -z "$candidate" || "$candidate" == "(none)" ]]; then
    return 1
  fi
  [[ "$installed" != "$candidate" ]]
}

install_code_update() {
  log "Attempting to upgrade 'code' from apt..."
  if sudo apt-get install -y --only-upgrade code 2>&1 | sudo tee -a "$LOG_FILE" >/dev/null; then
    log "VS Code CLI upgraded to version $(get_installed_code_version)."
    return 0
  else
    log "Warning: 'code' upgrade failed; see log for details."
    return 1
  fi
}

start_update_watcher() {
  (
    while true; do
      sleep "$UPDATE_CHECK_INTERVAL_SECONDS"
      if ! have_apt; then
        vlog "apt-get not found; skipping periodic update checks."
        continue
      fi
      refresh_apt_indexes
      if code_update_available; then
        local installed candidate
        installed="$(get_installed_code_version)"
        candidate="$(get_candidate_code_version)"
        log "Update available for VS Code CLI (installed: ${installed:-unknown}, candidate: ${candidate:-unknown})."
          log "Approval file detected ($APPROVAL_FILE). Proceeding with upgrade."
          if install_code_update; then
            rm -f "$APPROVAL_FILE" || true
          fi
        else
          log "To upgrade now, exec inside the container and create $APPROVAL_FILE (e.g., 'touch $APPROVAL_FILE')."
        fi
      else
        vlog "No VS Code CLI update available."
      fi
  ) >/dev/null 2>&1 &
}

# 0) On startup, attempt to auto-update VS Code CLI if an update is available
if have_apt; then
  if [[ "$AUTO_UPDATE_ON_START" == "true" ]]; then
    vlog "Checking for VS Code CLI updates at startup..."
    refresh_apt_indexes
    if code_update_available; then
      installed="$(get_installed_code_version)"
      candidate="$(get_candidate_code_version)"
      log "Startup upgrade: updating VS Code CLI from ${installed:-unknown} to ${candidate:-unknown}."
      install_code_update || log "Startup upgrade failed; continuing with current version."
    else
      vlog "VS Code CLI is up-to-date at startup."
    fi
  else
    vlog "AUTO_UPDATE_ON_START=false; skipping startup update."
  fi
  # Always start periodic watcher
  start_update_watcher
else
  vlog "apt-get not found; skipping VS Code CLI update checks."
fi

# 1) Authenticate GitHub CLI if token provided
TOKEN="${GH_TOKEN:-${GITHUB_TOKEN:-}}"
if [[ -n "${TOKEN}" ]]; then
  if command -v gh >/dev/null 2>&1; then
    vlog "Detected GH token in environment; attempting non-interactive gh auth login."
    # gh expects the token on stdin when using --with-token
    if echo -n "$TOKEN" | gh auth login --with-token >>"$LOG_FILE" 2>&1; then
      log "gh auth login succeeded."
      # Configure git to use gh's credential helper
      if gh auth setup-git >>"$LOG_FILE" 2>&1; then
        vlog "gh auth setup-git completed."
      else
        log "Warning: gh auth setup-git failed (see log)."
      fi
    else
      log "Warning: gh auth login failed (see log)."
    fi
  else
    log "Warning: gh CLI not found in PATH; skipping GitHub authentication."
  fi
else
  vlog "No GH_TOKEN/GITHUB_TOKEN provided; skipping gh auth."
fi

# 2) Optional git identity configuration
if [[ -n "${GIT_USER_NAME:-}" && -n "${GIT_USER_EMAIL:-}" ]]; then
  vlog "Configuring git identity from env vars."
  git config --global user.name "${GIT_USER_NAME}"
  git config --global user.email "${GIT_USER_EMAIL}"
fi

# 3) Launch VS Code tunnel (same semantics as previous Dockerfile CMD)
#    Allow tests to skip tunnel startup via SKIP_TUNNEL=true.
if [[ "$SKIP_TUNNEL" == "true" ]]; then
  log "SKIP_TUNNEL=true set; skipping VS Code tunnel startup."
  exit 0
fi
CODE_CLI="/usr/share/code/bin/code"
if [[ ! -x "$CODE_CLI" && -x "$(command -v code || true)" ]]; then
  CODE_CLI="$(command -v code)"
fi

if [[ ! -x "$CODE_CLI" ]]; then
  log "Error: VS Code CLI not found. Expected at /usr/share/code/bin/code or in PATH."
  exit 1
fi

TUNNEL_NAME="${TUNNEL_NAME:-}"
vlog "Starting VS Code tunnel (name='${TUNNEL_NAME}')."

if [[ -n "$TUNNEL_NAME" ]]; then
  exec "$CODE_CLI" tunnel --accept-server-license-terms --log info --name "$TUNNEL_NAME"
else
  exec "$CODE_CLI" tunnel --accept-server-license-terms --log info
fi
